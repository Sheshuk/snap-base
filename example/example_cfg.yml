node_branching: !Node:branching
  - !chain:generate
      - !from example.random: {}
      - .timing.every: {seconds: 1}
      - .output.dump: {prefix: 'generated:'}
      - !to [process_positive, process_high]

  - !chain:process_positive
      - example.threshold: {val: 0}
      - .output.dump: {prefix: 'pos!'}
      - example.Buffer: {}
      - .timing.every: {seconds: 5}
      - .output.dump: {prefix: 'Buffered positives:'}
      - example.count
      - .output.dump: {prefix: 'Positive values: '}

  - !chain:process_high
      - example.threshold: {val: 3}
      - example.Buffer: {}
      - .timing.every: {seconds: 5}
      - example.count
      - example.threshold: {val: 0} #discard values lower than 
      - .output.dump: {prefix: 'We even have values>3: '}



node_parallel:
  generate:
    source: 
      example.gen_timestamp: {}
    steps:
      - .timing.every: {seconds: 1}
      - snap.Parallel: 
          function: {obj@example.blocking: {delay: 2}}
          max_workers: 20
      - example.measure_latency
      - .output.dump: {prefix: "latency: "}

node_blocking:
  generate:
    source: 
      example.gen_timestamp: {}
    steps:
      - .timing.every: {seconds: 1}
      - example.blocking: {delay: 1.2}
      - example.measure_latency
      - .output.dump: {prefix: "latency: "}

